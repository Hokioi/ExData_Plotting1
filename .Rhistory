GithubAPIApp <- oauth_app("HokioiGithubAPIApp", key = "88780ee19738b550356c", secret = "463621bb53a6faa7e06141ab9387a0fdc8cb120c")
## GetOAuth credentials
GithubToken <- oauth2.0_token(oauth_endpoints("HokioiGithubAPIApp"), GithubAPIApp)
## Use API
gtoken <- config(token = GithubToken)
LeekRepo <- GET("https://api.github.com/users/jtleek/repos", GithubToken)
stop_for_status(LeekRepo)
content(LeekRepo)
oauth_endpoints("github")
GithubAPIApp <- oauth_app("HokioiGithubAPIApp", key = "88780ee19738b550356c", secret = "463621bb53a6faa7e06141ab9387a0fdc8cb120c")
GithubToken <- oauth2.0_token(oauth_endpoints("HokioiGithubAPIApp"), GithubAPIApp)
library(httr)
oauth_endpoints("github")
GithubAPIApp <- oauth_app("HokioiGithubAPIApp", key = "88780ee19738b550356c", secret = "463621bb53a6faa7e06141ab9387a0fdc8cb120c")
GithubToken <- oauth2.0_token(oauth_endpoints("github"), GithubAPIApp)
## Find OAuth settings for github
library(httpuv)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
GithubAPIApp <- oauth_app("HokioiGithubAPIApp", key = "88780ee19738b550356c", secret = "463621bb53a6faa7e06141ab9387a0fdc8cb120c")
GithubToken <- oauth2.0_token(oauth_endpoints("github"), GithubAPIApp)
gtoken <- config(token = GithubToken)
LeekRepo <- GET("https://api.github.com/users/jtleek/repos", GithubToken)
content(LeekRepo)
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10))
X <- [sample(1:5, )]; X%var2[c(1, 3)] = NA
X
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10))
X <- [sample(1:5, )]; X$var2[c(1, 3)] = NA
X
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10))
X <- X[sample(1:5, )]; X$var2[c(1, 3)] = NA
X
X <- X[sample(1:5), ]; X$var2[c(1, 3)] = NA
X
X[(X$var2<10), ]
X[("var2"<10), ]
X[which(X$var2<10), ]
?ave
library(swirl)
rm(list=ls()
)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyer)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version !is.na)
filter(cran, r_version == !is.na)
filter(cran, r_version!is.na)
filter(cran, r_version "!is.na")
filter(cran, !is.na(r_version)
filter(cran, !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb - size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size)
)
summarize(cran, avg_bytes = mean(size)
)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count >679)
top_counts
View(top_counts)
arrange(top_counts, desc(count)
)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique)
)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size /2^20)
print
submit()
submit()
skip()
submit()
skip()
submit()
skip()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, column count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
skip()
?spread
skip()
extract_numeric("class5")
submit()
submit()
skip()
View(students4)
students4
submit()
submit()
submit()
passed
failed
mutate(passed, passed="passed")
mutate(passed, status="passed")
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
[""?.]
[^?.]
swirl()
library(swirl)
rm(list=ls())
swirl()
Sys.getlocale(category = "LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1/9/2012")
ymd("1920-1-2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
skip()
this_moment
now(tzone = "America/New York")
now("America/New York")
now(tzone = "America/New_York")
now("America/New_York")
skip()
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- (depart + hours = 15)
arrive <- (depart + hours = (15))
arrive <- (depart + hours + (15))
arrive <- (depart + hours(15))
arrive <- (depart + hours(15) + minutes(50))
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = Singapore)
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(arrive - last_time)
how_long <- interval(arrive - last_time) ## new_interval is not a function in lubridate any more
how_long <- interval(arrive, last_time)
skip()
as.period(how_long)
stopwatch()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
meansd <- grep("mean()", names(complete), value = TRUE)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
## Read the relevant data into R
trainData <- read.table(unz(temp, "UCI HAR Dataset/train/X_train.txt"))
trainLabels <- read.table(unz(temp, "UCI HAR Dataset/train/y_train.txt"))
trainSubjects <- read.table(unz(temp, "UCI HAR Dataset/train/subject_train.txt"))
testData <- read.table(unz(temp, "UCI HAR Dataset/test/X_test.txt"))
testLabels <- read.table(unz(temp, "UCI HAR Dataset/test/y_test.txt"))
testSubjects <- read.table(unz(temp, "UCI HAR Dataset/test/subject_test.txt"))
activityLabels <- read.table(unz(temp, "UCI HAR Dataset/activity_labels.txt"))
features <- read.table(unz(temp, "UCI HAR Dataset/features.txt"))
## Unlink the temporary file
unlink(temp)
## Record the download date
DateDownloaded <- date()
DateDownloaded ### "Wed Jan 20 12:08:48 2016" (version used in this script)
# Merge data into one complete dataset
## Rename variables
### Load dplyr package
library(dplyr)
### rename subject and label columns
testSubjects <- rename(testSubjects, subject = V1)
testLabels <- rename(testLabels, actvity = V1)
### Rename testData columns using the data in column 2 of the features table
colnames <- features[ ,2]
names(testData) <- colnames
## Create one table with all of the test data
test <- cbind(testSubjects, testLabels, testData)
## Create one table with all of the training data
train <- cbind(trainSubjects, trainLabels, trainData)
## Create one table with all of the test and training data, using THE test data column names that were created above
names(train) <- names(test) ## needs to be done otherwise rbind throws an errow due to non-matching column names
complete <- rbind(test, train)
meansd <- grep("mean()", names(complete), value = TRUE)
meansd
meansd <- grep("mean()"|"std()", names(complete), value = TRUE)
meansd <- grep("mean()|std()", names(complete), value = TRUE)
meansd <- grep("mean()"|"std()", names(complete), value = TRUE)
meansd
meansd <- grep("mean\()|std()", names(complete), value = TRUE)
meansd <- grep("\mean()|std()", names(complete), value = TRUE)
meansd <- grep("mean(\)|std()", names(complete), value = TRUE)
meansd <- grep("mean\(\)|std()", names(complete), value = TRUE)
meansd <- grep("mean()\|std()", names(complete), value = TRUE)
meansd <- grep("mean\(\)|std\(\)", names(complete), value = TRUE)
meansd <- grep("mean\\(\\)|std\\(\\)", names(complete), value = TRUE)
meanssd
meansd
completemeansd <- select(complete, subject, activity, meansd)
View(complete)
testLabels <- rename(testLabels, activity = V1)
### Rename testData columns using the data in column 2 of the features table
colnames <- features[ ,2]
names(testData) <- colnames
## Create one table with all of the test data
test <- cbind(testSubjects, testLabels, testData)
## Create one table with all of the training data
train <- cbind(trainSubjects, trainLabels, trainData)
## Create one table with all of the test and training data, using THE test data column names that were created above
names(train) <- names(test) ## needs to be done otherwise rbind throws an errow due to non-matching column names
complete <- rbind(test, train)
# Extract the mean and standard deviation measurements only for each measurement
## the mean and sd measurements are those with mean() and std() in the column names
## Use grep to create a vector with the column names that have "mean()" or "std()" in them
meansd <- grep("mean\\(\\)|std\\(\\)", names(complete), value = TRUE)
## Use select and the meansd vector to extract the subject, activity, mean() and std() columns
completemeansd <- select(complete, subject, activity, meansd)
View(complete)
testLabels <- rename(testLabels, activity = V1)
testSubjects <- rename(testSubjects, subject = V1)
completemeansd <- select(complete, subject, actvity, meansd)
meansd2 <- grep("mean\\(\\)|std\\(\\)", names(complete))
completemeansd <- select(complete, subject, actvity, meansd2) ### correct actvity
completemeansd <- select(complete, subject, actvity, dots = meansd) ### correct actvity. Also not working
completemeansd <- select(complete, subject, actvity, dots = meansd2) ### correct actvity. Also not working
completemeansd <- select(complete, subject, actvity, one_of(meansd)) ### correct actvity. Also not working
complete2 <- select(complete, subject, actvity, contains("mean\\(\\)|std\\(\\)"))
complete2 <- select(complete, subject, actvity, c(meansd2))
complete2 <- complete[ , grepl("mean\\(\\)|std\\(\\)"), names(complete)]
complete2 <- complete[ , grepl("mean\\(\\)|std\\(\\)"), colnames(complete)]
columnnames <- features[ ,2]
names(testData) <- columnnames
test <- cbind(testSubjects, testLabels, testData)
train <- cbind(trainSubjects, trainLabels, trainData)
names(train) <- names(test) ## needs to be done otherwise rbind throws an errow due to non-matching column names
complete <- rbind(test, train)
complete2 <- complete[ , grepl("mean\\(\\)|std\\(\\)"), colnames(complete)]
complete2 <- select(complete, grepl("mean\\(\\)|std\\(\\)"))
complete2 <- select(complete, contains(grepl("mean\\(\\)|std\\(\\)")))
complete2 <-complete[ , meansd]
complete2 <-complete[ , "subject", "actvity", meansd]
complete2 <-complete[ , c("subject", "actvity", meansd)]
View(complete2)
names(complete2)
library(RQDA)
q()
getwd()
setwd("../Andrea Video Image Music/Coursera/Exploratory data analysis/week 1/project")
getwd()
data <- read.table(unz("household_power_consumption.zip", "household_power_consumption.txt"), header = TRUE, sep = ";")
str(data)
head(data)
# Merge Date and Time  variables into a new column, DateTime
data$DateTime <- paste(data$Date,data$Time)
str(data)
head(data)
#Convert DateTime to POSIXlt to allow easier subsetting
data$DateTime <-strptime(data$DateTime, "%e/%m/%Y %H:%M:%S")
class(data$DateTime)
str(data)
# Subset the data for 1/2/2007 and 2/2/2007
dataFeb1and2 <- subset(data, DateTime >= "2007-2-1 00:00:00" & DateTime <= "2007-2-2 23:59:59")
## Convert factor variables to numeric
dataFeb1and2$Global_active_power <- as.numeric(as.character(dataFeb1and2$Global_active_power))
dataFeb1and2$Sub_metering_1 <- as.numeric(as.character(dataFeb1and2$Sub_metering_1))
dataFeb1and2$Sub_metering_2 <- as.numeric(as.character(dataFeb1and2$Sub_metering_2))
dataFeb1and2$Sub_metering_3 <- as.numeric(as.character(dataFeb1and2$Sub_metering_3))
dataFeb1and2$Voltage <- as.numeric(as.character(dataFeb1and2$Voltage))
dataFeb1and2$Global_reactive_power <- as.numeric(as.character(dataFeb1and2$Global_reactive_power))
str(dataFeb1and2)
head(dataFeb1and2)
png("plot3.png")
plot(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_1, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "black")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_2, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "red")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_3, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "blue")
title(ylab = "Energy sub metering", cex.lab = 0.75)
legend("topright", lwd = 1, col = c("black", "red", "blue"), legend = c(names(dataFeb1and2[c(7, 8, 9)])), cex = 0.75)
dev.off()
png("plot3.png", width = 480, height = 480, units = "px")
plot(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_1, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "black")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_2, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "red")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_3, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "blue")
title(ylab = "Energy sub metering", cex.lab = 0.75)
legend("topright", lwd = 1, col = c("black", "red", "blue"), legend = c(names(dataFeb1and2[c(7, 8, 9)])), cex = 0.75)
dev.off()
## Create 480 x 480 png file
png("plot4.png", width = 480, height = 480, units = "px")
## set background colour to white and create 2x2 layout
par(mfcol = c(2, 2))
## bg = "white"
## plot Global active power line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, xlab = "", ylab = "", type = "n", cex.axis = 0.75)
title(ylab = "Global Active Power (kilowatts)", cex.lab = 0.75)
lines(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, type = "l")
## plot Sub metering line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_1, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "black")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_2, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "red")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_3, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "blue")
title(ylab = "Energy sub metering", cex.lab = 0.75)
legend("topright", lwd = 1, col = c("black", "red", "blue"), legend = c(names(dataFeb1and2[c(7, 8, 9)])), cex = 0.75, bty = "n")
## plot Voltage line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Voltage, xlab = "datetime", ylab = "Voltage", type = "l", cex.axis = 0.75, cex.lab = 0.75)
## plot Global reactive power line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type = "l", cex.axis = 0.75, cex.lab = 0.75)
## Save as plot4.png, 480 x 480 pixels
###dev.copy(png, file = "plot4.png", width = 480, height = 480, units = "px")
dev.off()
getwd()
setwd("../Andrea Video Image Music/Coursera/Exploratory data analysis/week 1/project/ExData_Plotting1")
getwd()
ls()
setwd("C:/Users/Admin/Andrea Video Image Music/Coursera/Exploratory data analysis/week 1/project/ExData_Plotting1")
## Plot histogram
hist(dataFeb1and2$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)", ylab = "Frequency", cex.axis = 0.75, cex.lab = 0.75)
## Save as plot1.png, 480 x 480 pixels
dev.copy(png, file = "plot1.png", width = 480, height = 480, units = "px")
dev.off()
# Plot 2 - Global Active Power by day
## set background colour to white
par(bg = "white")
## Plot line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, xlab = "", ylab = "", type = "n", cex.axis = 0.75)
title(ylab = "Global Active Power (kilowatts)", cex.lab = 0.75)
lines(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, type = "l")
## Save as plot2.png, 480 x 480 pixels
dev.copy(png, file = "plot2.png", width = 480, height = 480, units = "px")
dev.off()
# Plot 3 - Energy sub metering 1 2 and 3 by Day
## Create 480 x 480 png file
png("plot3.png", width = 480, height = 480, units = "px")
## plot line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_1, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "black")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_2, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "red")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_3, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "blue")
title(ylab = "Energy sub metering", cex.lab = 0.75)
legend("topright", lwd = 1, col = c("black", "red", "blue"), legend = c(names(dataFeb1and2[c(7, 8, 9)])), cex = 0.75)
## close png device
dev.off()
# Plot 4 - Multiple plots
## Create 480 x 480 png file
png("plot4.png", width = 480, height = 480, units = "px")
## set background colour to white and create 2x2 layout
par(mfcol = c(2, 2))
## plot Global active power line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, xlab = "", ylab = "", type = "n", cex.axis = 0.75)
title(ylab = "Global Active Power (kilowatts)", cex.lab = 0.75)
lines(dataFeb1and2$DateTime, dataFeb1and2$Global_active_power, type = "l")
## plot Sub metering line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_1, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "black")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_2, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "red")
lines(dataFeb1and2$DateTime, dataFeb1and2$Sub_metering_3, xlab = "", ylab = "", type = "l", cex.axis = 0.75, col = "blue")
title(ylab = "Energy sub metering", cex.lab = 0.75)
legend("topright", lwd = 1, col = c("black", "red", "blue"), legend = c(names(dataFeb1and2[c(7, 8, 9)])), cex = 0.75, bty = "n")
## plot Voltage line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Voltage, xlab = "datetime", ylab = "Voltage", type = "l", cex.axis = 0.75, cex.lab = 0.75)
## plot Global reactive power line chart
plot(dataFeb1and2$DateTime, dataFeb1and2$Global_reactive_power, xlab = "datetime", ylab = "Global_reactive_power", type = "l", cex.axis = 0.75, cex.lab = 0.75)
## close png device
dev.off()
